/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJPanel.java
 *
 * Created on Oct 21, 2010, 1:19:54 PM
 */

package eboard.view;

/**
 *
 * @author albertwang
 */
import eboard.control.Application;
import eboard.itf.model.IResponse;
import eboard.itf.model.IRoom;
import eboard.model.IShape;
import eboard.model.Response;
import java.awt.geom.*;
import java.awt.*;
//import java.awt.geom.Ellipse2D;
import javax.imageio.*;
import java.awt.image.BufferedImage;
import java.io.*;


import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Area;
import javax.swing.JPanel;
public class NewJPanel extends javax.swing.JPanel
{

            private static Color bg = Color.black;
            //private static Color  tmp = Color.black;

            final static BasicStroke stroke = new BasicStroke(2.0f);
            final static BasicStroke wideStroke = new BasicStroke(8.0f);
            static String Text = "";
           static int m = 1;
            static boolean cleanCanvas;
            public static int shapeNumber =-1;
            private static boolean fCoillAreammand;

            AffineTransform size = new AffineTransform();
           ArrayList<BufferedImage>  RedoImageBox = new ArrayList<BufferedImage>();// to store redo image
            ArrayList<BufferedImage> UndoImageBox = new ArrayList<BufferedImage>();// to store undo image
            ArrayList<String> textBox = new ArrayList<String>();//store text
            ArrayList<Point>  PointBox = new ArrayList<Point>();// store point where the text need to be drawn
            static  ArrayList<Shape> shapes = new ArrayList<Shape>();
             static ArrayList<Color> PaintingColor = new ArrayList<Color>();
            ArrayList<Area> areas = new ArrayList<Area>();
            Point startDrag, endDrag, textPoint;
            private int startX = 0;
            private int startY = 0;
            Shape clippingArea;
            static BufferedImage  img1 =
                    new BufferedImage(810,320,BufferedImage.TYPE_INT_RGB);

            private IRoom room = null;
            private boolean dragOp = false;
            private Graphics2D gg = null;
//            private BufferedImage currentImg = null;
    /** Creates new form NewJPanel */
    public NewJPanel(IRoom room) {
        initComponents();
        this.setVisible(true);
        this.room = room;
        this.startDrag = new Point(0,0);
        this.endDrag  = new Point(0,0);
        gg = img1.createGraphics();
        Rectangle2D drawBoard = new Rectangle2D.Double(0, 0, 810, 320);
        gg.setBackground(Color.WHITE);
        gg.fill(drawBoard);
       
    }
      public static Shape getShape() // if shape array list is not empty,then send the new shape back.
      {
             if(shapes.isEmpty())
             {
                         return null;

             }
             else
             {
                     int i = shapes.size();
                     return shapes.get(i-1);
             }


      }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        setPreferredSize(new java.awt.Dimension(700, 500));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                NewJPanel.this.mousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                MouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 700, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 500, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    private void mousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mousePressed
        

          startX = evt.getX();
          startY = evt.getY();
          startDrag = new Point(startX,startY);
          endDrag = startDrag;
          if(shapeNumber ==11)
          {
                FontDialog fd = this.room.getRoomViewController().getFrame().fd;
                fd.setEnviroment(this, bg,evt.getX(),evt.getY());

                fd.setLocation(this.getX()+evt.getX(),this.getY()+evt.getY());
                fd.setVisible(true);
                
          }
//          System.out.println("7");
          repaint();


    }//GEN-LAST:event_mousePressed

    void setText(String txt,  Font f, int x, int y){
        this.dragOp = true;
//        int size = UndoImageBox.size();
//        this.img1 = new BufferedImage(this.getWidth(),
//        this.getHeight(),BufferedImage.TYPE_INT_RGB);

//         Graphics2D g = this.img1.createGraphics();
//        this.paint(g);
          
//        BufferedImage bimg = new BufferredImage this.UndoImageBox.get(size-1).getRaster()
//        Graphics2D g = this.UndoImageBox.get(size-1).createGraphics();
        gg.setFont(f);
        gg.setBackground(bg);
        gg.drawString(txt, x, y);
        shapeNumber = 123;
        this.storeImage4Undo();
        repaint();
    }

    void setImage(BufferedImage bi , int x, int y){
        this.dragOp = true;
        gg.drawImage(bi, x, y, this);
        this.storeImage4Undo();
        repaint();
    }



    private void MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MouseReleased
        Shape s = null;
        Area a = null;
        
        dragOp = false;
         switch(shapeNumber)
        {
            case 0:
                s = makeEllipse(startDrag.x, startDrag.y, evt.getX(), evt.getY());

                break;
            case 1:
                s = makeLine(startDrag.x, startDrag.y, evt.getX(), evt.getY());

                break;
            case 2:
                s = makeRectangle(startDrag.x, startDrag.y, evt.getX(), evt.getY());

                break;
            case 3://filled ellipse
                s = makeEllipse(startDrag.x, startDrag.y, evt.getX(), evt.getY());

                break;
            case 4://filled ellipse
                s = makeRectangle(startDrag.x, startDrag.y, evt.getX(), evt.getY());

                break;
             case 5:
                 break;
             case 6:
                 break;
            case 7:// has some problems
                s = makeCircle(startDrag.x, startDrag.y, evt.getX(), evt.getY());

                break;
            case 8:

                break;
            case 10:

                break;

            case 11:

                break;

            default:

                break;



        }


          if (s!=null){


              gg.setColor(bg);
              gg.setStroke(new BasicStroke(2));
              if(shapeNumber==3 || shapeNumber==4){
                gg.fill(s);
              }else
                gg.draw(s);

             storeImage4Undo();
         }
         if(shapeNumber==5||shapeNumber==6){
           if(isPointInsideComponent(evt.getX(),evt.getY(),this)){
               this.storeImage4Undo();
           }
         }
         
          repaint();
          
          
          
          int x = evt.getX();
          int y = evt.getY();

          if(isPointInsideComponent(evt.getX(),evt.getY(),this)){
              informOther(room.getRoomId(),s);
          }
          
          
    }//GEN-LAST:event_MouseReleased

    private boolean isPointInsideComponent(int x, int y, Component p){
        return x>p.getX() &&
                y>p.getY() &&
                x < p.getX()+p.getWidth()&&
                y< p.getY() + p.getHeight();
    }
   public void informOther(final String roomId, final Shape s){
       final IResponse r = new Response();
       new Thread(new Runnable(){
           public void run(){
               if (s == null||true){
                   r.combine(Application.getInstance().draw(room.getRoomId(), new IShape(img1,1)));
               }else{

                   r .combine( Application.getInstance().draw(room.getRoomId(), new IShape(bg,s,shapeNumber) ));
               }
               

               if(!r.isSuccess()) {
                  javax.swing.JOptionPane.showMessageDialog(null, r.getResponseMsg(), "Warning",
                          javax.swing.JOptionPane.PLAIN_MESSAGE);
                }
           }
       }).start();
       
       
   }

   public void informOther(final String roomId, final int optype){
       final IResponse r = new Response();
       new Thread(new Runnable(){
           public void run(){
               if (optype == 0){
                   r.combine(Application.getInstance().undo(roomId));
               }else if (optype == 1){

                   r .combine( Application.getInstance().redo(roomId));
               }else if (optype == 2){
                   r.combine(Application.getInstance().clearBoard(roomId));
               }


               if(!r.isSuccess()) {
                  javax.swing.JOptionPane.showMessageDialog(null, r.getResponseMsg(), "Warning",
                          javax.swing.JOptionPane.PLAIN_MESSAGE);
                }
           }
       }).start();

   }


    private void storeImage4Undo(){
        BufferedImage tmpImg = new BufferedImage(
                this.getWidth(),this.getHeight(),BufferedImage.TYPE_INT_RGB);
          Graphics2D g = tmpImg.createGraphics();
//          if (is!=null){
//              gg.setColor(Color.BLACK);
//              gg.setColor(bg);
//              gg.setStroke(new BasicStroke(2));
//              gg.draw(s);

              g.drawImage(img1, 0, 0, this.getWidth(),this.getHeight(), this);
//         }
              this.UndoImageBox.add(tmpImg);
              this.RedoImageBox.clear();
    }


    private void MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MouseDragged
        // TODO add your handling code here:
        dragOp = true;
//        Shape s = null;
        if(shapeNumber == 6 ||shapeNumber ==5){
            
            
            if(shapeNumber == 5){
                gg.setColor(Color.WHITE);
                gg.setStroke(new BasicStroke(10));
            }else{
                gg.setColor(bg);
                gg.setStroke(new BasicStroke(2));
            }
            gg.drawLine(startX, startY, evt.getX(),evt.getY())
            ;
           startX = evt.getX();
           startY = evt.getY();
        }
        
        endDrag = new Point(evt.getX(), evt.getY());
          repaint();
          
    }//GEN-LAST:event_MouseDragged

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        // TODO add your handling code here:
        room.getRoomViewController().getFrame().jlbCoordinates.setText(
                "Coordinates ("+evt.getX()+","+evt.getY()+")");
        repaint();
    }//GEN-LAST:event_formMouseMoved
/**

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
8*/
    @Override
    public void paintComponent(Graphics g)
    {

        int x1 = (int)startDrag.x;
        int y1 = (int)startDrag.y;
        int x2 = (int)endDrag.x;
        int y2 = (int)endDrag.y;
             super.paintComponent(g);







             Graphics2D g2 = (Graphics2D) g;


               AffineTransform saveXform = g2.getTransform();
        AffineTransform toCenterAt = new AffineTransform();
        toCenterAt.concatenate(size);

        g2.transform(toCenterAt);


        
             
                 g2.drawImage(img1, null, 0, 0);





          Shape s = null;
                  switch(shapeNumber)
        {
            case 0:
                s = makeEllipse(x1,y1 ,x2 ,y2);
                break;
            case 1:
                s = makeLine(x1,y1 ,x2 ,y2);
                break;
            case 2:
                s = makeRectangle(x1,y1 ,x2 ,y2);
                break;
             case 3:
                s = makeEllipse(x1,y1 ,x2 ,y2);
                break;
            case 4:
                s = makeRectangle(x1,y1 ,x2 ,y2);
                break;
             case 5:
                 break;
             case 6:
                 break;
            case 7:// has some problems
                s = makeCircle(x1,y1 ,x2 ,y2);
                break;
            case 8:
                break;
            case 10:

                break;

            case 11:

                break;

            default:

                break;



        }
         if(s!=null&&dragOp){
             g2.setColor(bg);
             g2.setStroke(new BasicStroke(2));
             g2.draw(s);

         }
             
         g2.setTransform(saveXform);
    }


    public void clear(){
//        Rectangle2D drawBoard = new Rectangle2D.Double(0, 0, 810, 320);
//        BufferedImage bi = new BufferedImage(810,320,BufferedImage.TYPE_INT_RGB);
//        Graphics2D g = (Graphics2D)bi.getGraphics();
//        g.setBackground(Color.WHITE);
//        gg.clearRect(0, 0, 810, 320);
        Shape s = this.makeRectangle(0, 0, 810, 320);
//        gg.draw(s);
        gg.setColor(Color.white);
        
        gg.fill(s);//u can set fill color before this line of code
//        gg.draw(bi,0,0,this.getWidth(),this.getHeight(),this);
        paintBackground(gg);
        this.storeImage4Undo();
        repaint();
    }
    private void paintBackground(Graphics2D g2){
      g2.setStroke(new BasicStroke(1));
      g2.setPaint(Color.LIGHT_GRAY);
      for (int i = 0; i < getSize().width; i += 10) {
        Shape line = new Line2D.Float(i, 0, i, getSize().height);
        g2.draw(line);
      }

      for (int i = 0; i < getSize().height; i += 10) {
        Shape line = new Line2D.Float(0, i, getSize().width, i);
        g2.draw(line); 
      }

       bg = room.getRoomViewController().getFrame().jplBgColor.getBackground() ;

    }
    
    // this method should return different kinds of shapes according to the buttion pressed
    private Ellipse2D.Float makeEllipse(int x1, int y1, int x2, int y2) {
      return new Ellipse2D.Float(Math.min(x1, x2), Math.min(y1, y2), Math.abs(x1 - x2), Math.abs(y1 - y2));
    }
    private Line2D.Float makeLine(int x1, int y1, int x2, int y2) {
      return new Line2D.Float(x1, y1, x2,y2);
    }
    private Rectangle2D.Float makeRectangle(int x1, int y1, int x2, int y2) {
      return new Rectangle2D.Float(Math.min(x1, x2), Math.min(y1, y2), Math.abs(x1 - x2), Math.abs(y1 - y2));
    }
    /**private Path2D.Float makePath() {
      return new Path2D.Float();
    }*/
    private Ellipse2D.Float makeCircle(int x1, int y1, int x2, int y2) {
        int distance = (int)Point.distance( (double)x1, (double)y1,  (double)x2,  (double)y2);

        return new Ellipse2D.Float(Math.min(startDrag.x, endDrag.x), Math.min(startDrag.y, endDrag.y), distance, distance);
    }
    public static void setShapeNumber(int i)
    {
                shapeNumber = i;
    }
    public  void setCleanCanvas(boolean a)
    {
               cleanCanvas = a;
              repaint();
    }
    public  void setBg(Color a)
    {
                  bg = a;
    }
    public  Color getBg()
    {
                   return bg;
    }
    public void saveImage(BufferedImage image)
    {
                 Graphics2D g2 = image.createGraphics();
                   this.paint(g2);
        g2.dispose();
        try
        {
           ImageIO.write(image, "png", new File("mypanel.png"));
        }
        catch(IOException ioe)
        {
          System.out.println(ioe.getMessage());
        }
    }

    public void setTransform(int i)
    {
         //size = new AffineTransform();
        switch(i)
        {
            case 0:  size.scale(1.25,1.25);

//                   System.out.println("1");
                    repaint();
               break;
            case 1: size.rotate(Math.toRadians(45));
//                   System.out.println("2");
                    repaint();
                break;
            case 2: size.scale(0.8, 0.8);
//                  System.out.println("3");
                   repaint();
               break;
        }

    }
    //public void clippingArea()
   public  void imageDrawing(BufferedImage img)
   {
                
                img1 = img;
                shapeNumber = 10;
                repaint();
   }

   /**
    * UndoImageBox size always >= 1.
    */
   public void undo()
    {
       if(UndoImageBox.size()>1)
       {
                    shapeNumber =10;
                    RedoImageBox.add(UndoImageBox.get(UndoImageBox.size()-1));
                    UndoImageBox.remove(UndoImageBox.size()-1);
                    gg.drawImage(UndoImageBox.get(UndoImageBox.size()-1), 0, 0, this);
                    repaint();
       }
// 

    }
   public static void setDrawText(String  input)
    {
                 shapeNumber  = 11;
                 Text= input;

                 
   }
   
    public void Redo()
    {
          if(RedoImageBox.size()>0)
       {
              int redoSize = RedoImageBox.size();
                      UndoImageBox.add(RedoImageBox.get(redoSize-1));

                     
                      gg.drawImage(RedoImageBox.get(redoSize-1),
                              0, 0, this);
                      RedoImageBox.remove(redoSize-1);
//                      System.out.println("Undo" + UndoImageBox.size());
//                     System.out.println("Redo" + RedoImageBox.size());
                     shapeNumber =10;
                     repaint();
       }
}
    public  void addShape(IShape  newShape)
    {
//        this.shapeNumber = newShape.getDrawControl();
        Shape s = newShape.getShapeModel();
        if(s==null) {
            gg.drawImage(newShape.getImage(), 0, 0, this);
            System.out.println(111);
        }
        else {
           gg.setBackground(newShape.getStokeColor());
           gg.setStroke(new BasicStroke(2));
           
//           gg.setStroke(newShape.get)
            gg.draw(s);
//            this.storeImage4Undo();
            System.out.println(222);

        }
        this.storeImage4Undo();
//            bg = newShape.getStokeColor();
            repaint();
}


//next part is  mutator
   public  Color getBackgroundColor()
   {
       return bg;
   }
   public void setBackgroundColor(Color bg)
   {
       this.bg = bg;
   }



public IShape getCurrentImage(){
    return new IShape(this.img1,10);
}

public void initUndoBox(){

    BufferedImage image = new BufferedImage(this.getWidth(), this.getHeight(),
            BufferedImage.TYPE_INT_RGB);
       Graphics2D g = image.createGraphics();
       this.paint(g);
    this.UndoImageBox.add(image);
}

public ArrayList<byte[]> getDoUndoOpList(){
    ArrayList<byte[]> result = new ArrayList<byte[]>();
    int i = 0;
    int size = this.UndoImageBox.size();
    for(; i < size; i++){
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
           try{
               ImageIO.write(this.UndoImageBox.get(i), "jpg", baos);
            }catch(IOException ioe){
                System.out.println("Parse image io exception.");
            }
          result.add(baos.toByteArray());

    }
    result.add(null);
    for(i = 0, size = this.RedoImageBox.size(); i < size; i++){
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
           try{
               ImageIO.write(this.RedoImageBox.get(i), "png", baos);
            }catch(IOException ioe){
                System.out.println("Parse image io exception.");
            }
          result.add(baos.toByteArray());

    }

    return result;

}

public void initDoUndoList(ArrayList<byte[]> undolist, ArrayList<byte[]> redolist){

    ByteArrayInputStream baos = null;
    int size = undolist.size();
    try{
        for(int i = 0; i < size; i ++){
            baos = new ByteArrayInputStream(undolist.get(i));
            this.UndoImageBox.add(ImageIO.read(baos));
        }
        size = redolist.size();
        for(int i = 0; i < size; i ++){
            baos = new ByteArrayInputStream(redolist.get(i));
            this.RedoImageBox.add(ImageIO.read(baos));
        }
    }catch(IOException ioe){
        System.out.println("IO exception when init undo redo lists");
    }
}

}
